new factorial, tailRec in {

  // The public contract only takes one parameter and one return
  contract factorial(@input, return) = {
    if (input >= 0) {
      tailRec!(1, input, *return)
    }
    else {
      return!(Nil)
    }
  }
  |

  // Tail recursion cuts the number of comm events in half
  // so the interesting stuff happens here.
  contract tailRec(@acc, @input, return) = {
    if (input == 0) {
      return!(acc)
    }
    else {
      tailRec!(acc * input, input - 1, *return)
    }
  }
  |

  // Unit tests below
  new stdout(`rho:io:stdout`) in {

    // Expected output: 6
    factorial!(3, *stdout)|

    // Expected output: 1
    factorial!(0, *stdout)|

    // Expected output: Nil
    factorial!(-3, *stdout)
  }
}
