new multiplyTupled,
    multiplyCurried,
    curry2,
    uncurry2,
    swapCurry,
    stdout(`rho:io:stdout`) in {

  /**
   * Tupled Version. Multiply two integers.
   * @param x First factor
   * @param y Second factor
   * @return The product of x and y
   */
  for (@x, @y, return <= multiplyTupled) {
    stdout!([x, "times", y, "is", x*y]) |
    return!(x * y)
  } |

  /**
   * Curried Version
   */
  for (@x, intermediateCh <= multiplyCurried) {
    new partiallyApplied in {
      // intermediateCh!(await (@y, return)) {
      intermediateCh!(*partiallyApplied) |
      for (@y, return <- partiallyApplied) {
        stdout!([x, "times", y, "is", x*y]) |
        return!(x * y)
      }
    }
  } |

  // Test the tupled version
  new ansCh in {
    // multiplyTupled!(3, 4, await @ans) {
    multiplyTupled!(3, 4, *ansCh) |
    for(@ans <- ansCh) {
      stdout!(["Testing MultiplyTupled. expected: 12, got:", ans])
    }
  } |

  // Test the Curried version
  new ansCh, partialCh in {
    // multiplyCurried!(3, await partial) {
    multiplyCurried!(3, *partialCh) |
    for (partial <- partialCh) {
      // partial!(4, await @ans) {
      partial!(4, *ansCh) |
      for (@ans <- ansCh) {
        stdout!(["Testing MultiplyCurried. expected: 12, got:", ans])
      }
    }
  } |

  /*
  Now let's write some scaffolding that takes the tupled
  version and converts it into a curried version. This works specifically for "functions" that take (arg, arg, return).
  */
  for (tupled, curriedCh, <- curry2) {
    new curried in {
      // curriedCh!(await (@arg1, partialCh)) {
      curriedCh!(*curried) |
      for(@arg1, partialCh <- curried) {
        new partial in {
          //partialCh!(await (@arg2, return)) {
          partialCh!(*partial) |
          for (@arg2, return <- partial) {
            tupled!(arg1, arg2, *return)
          }
        }
      }
    }
  } |

  // Test the Currying process
  new curriedCh, partialCh, ansCh in {

    // curry2!(multipluTupled, await curriedCh) {
    curry2!(*multiplyTupled, *curriedCh) |
    for (curried <- curriedCh) {
      // for curried(5, await partial) {
      curried!(5, *partialCh) |
      for (partial <- partialCh) {
        // partial!(6, await @ans) {
        partial!(6, *ansCh) |
        for (@ans <- ansCh) {
          stdout!(["Testing curry2. expected: 30, got:", ans])
        }
      }
    }
  } |

  /*
  And now, let's do the opposite. Transform a curried
  "function" into a tupled one. Again, only works for
  2-args.
  */
  for (curried, tupledCh <= uncurry2) {
    new tupled in {
      // tupledCh!(await (@arg1, @arg2, return)) {
      tupledCh!(*tupled) |
      for (@arg1, @arg2, return <- tupled) {
        new partialCh in {
          //curried!(arg1, await partial) {
          curried!(arg1, *partialCh) |
          for (partial <- partialCh) {
            partial!(arg2, *return)
          }
        }
      }
    }
  } |

  // Test the uncurrying process
  new tupledCh, ansCh in {
    // uncurry2!(*multiplyCurried, await tupled) {
    uncurry2!(*multiplyCurried, *tupledCh) |
    for (tupled <- tupledCh) {
      //tupled!(2, 9, await @ans) {
      tupled!(2, 9, *ansCh) |
      for (@ans <- ansCh) {
        stdout!(["Testing uncurry2. expected: 18, got:", ans])
      }
    }
  } |

  /*
  And finally, let's write one that swaps the order of the curried
  args. Hmmm I guess a commutative function wasn't the best possibl
  example. I'll add a debugging line for now.
  */
  for (orig, swappedCh <= swapCurry) {
    new swapped in {
      // swappedCh!(await (@arg1, partialCh)) {
      swappedCh!(*swapped) |
      for (@arg1, partialCh <- swapped) {
        new partial in {
          // partialCh!(await (@arg2, return))
          partialCh!(*partial) |
          for (@arg2, return <- partial) {
            // Now I have both args, so I can call the riginal curried version
            new partialCh in {
              // orig!(arg2, await partial) {
              orig!(arg2, *partialCh) |
              for (partial <- partialCh) {
                partial!(arg1, *return)
              }
            }
          }
        }
      }
    }
  } |

  // And test to curry swapping TODO!
  new swappedCh, partialCh, ansCh in {
    // swapCurry!(*multiplyCurried, await swapped) {}
    swapCurry!(*multiplyCurried, *swappedCh) |
    for (swapped <- swappedCh) {
      // swapped!(4, await partial) {
      swapped!(7, *partialCh) |
      for (partial <- partialCh) {
        // partial!(3, await @ans) {
        partial!(3, *ansCh) |
        for (@ans <- ansCh) {
          stdout!(["Testing swapCurry. expected: 21, got:", ans])
        }
      }
    }
  }
}
