new speciesFactory in {

  contract speciesFactory(adamCh, eveCh) = {
    new speciesId,
        eveId,
        adamId,
        Xchrom,
        Ychrom
    in {
      // Return Adam and Eve
      adamCh!({*speciesId | *adamId}) | //Should be a bundle, but bug in interpreter
      eveCh! ({*speciesId | *eveId }) | //Should be a bundle...

      // Form Adam and Eve (optional: in own image)
      @{*speciesId | "personFactory"}!("Adam", *adamId, *Xchrom, *Ychrom) |
      @{*speciesId | "personFactory"}!("Eve",  *eveId,  *Xchrom, *Xchrom) |

      /**
       * Creates a new person of the species. Because it requires
       * access to speciesId, this method can be called only from
       * within this file.
       */
      contract @{*speciesId | "personFactory"} (name, id, gene1, gene2) = {
        new genesCh in {
          // GenesCh is for nondeterministic inheritance
          genesCh!(*gene1) |
          genesCh!(*gene2) |

          /**
           * A contract to get each person's basic info like name, Id, chromosomes
           * Both sexes have this method
           */
          contract @{*speciesId | *id | "info"}(return) = {
            return!(
              ["I'm ${name}. " %% { "name": *name},
               "Member", *id, "of the species", *speciesId,
               "My DNA is ", (*gene1, *gene2)]
            )
          } |

          match (*gene1, *gene2) {

            // These methods are available only on females
            (=*Xchrom, =*Xchrom) => {

              /**
               * This method represents an external agent doing some match-making
               * for the female. The agent introduces the female to a potential
               * mate, and suggests a name for the offspring just in case it
               * works out.
               */
              contract @{*speciesId | *id | "breed"}(father, name, return) = {
                // Future work: Female may have some selection criteria for
                // whether she introduces herself. #geneticscreening

                new spermCh in {
                  // Female tells Male she's dtf
                  @{*father | "swipe right"}!({*speciesId | *id}) | // Should be bundle...

                  // Female creates channel that Male can only answer on
                  // if he is of the same species
                  for (sperm <- @{*father | *id}) {
                    new childId in {
                      return!({*speciesId | *childId}) |

                      for (egg <- genesCh) { // Should be peek
                        genesCh!(*egg) |
                        @{*speciesId | "personFactory"}!(*name, *childId, *egg, *sperm)
                      }
                    }
                  }
                }
              }
            }

            // These methods are available only on males
            {(=*Xchrom, =*Ychrom) \/ (=*Ychrom, =*Xchrom)} => {
              // Male learns that a female is interested in mating
              contract @{*speciesId | *id | "swipe right"} (mother) = {

                // Future work: Male may have some selection criteria for
                // whether he ends up mating.

                // Male sends "sperm" which is a copy of one of his genes
                for (spermGene <- genesCh) {
                  // This is where I'm stuck. Dad can't draw sperm from genes channel.
                  genesCh!(*spermGene) |
                  @{*mother | *id}!(*spermGene)
                }
              }
            }

            // This is an invalid genetic combination
            (=*Ychrom, =*Ychrom) => {"Uh oh. YY genes aren't allowed"}
          }
        }
      }
    }
  } |

  // Test / Demo
  new adamCh,
      eveCh,
      stdout(`rho:io:stdout`) in {

    speciesFactory!(*adamCh, *eveCh) |

    for (adam <- adamCh ; eve <- eveCh) {
      @{*eve  | "info"}!(*stdout) |
      @{*adam | "info"}!(*stdout) |

      // Now let's breed them.
      new offspringCh in {
        @{*eve  | "breed"}!(*adam, "Cain", *offspringCh) |

        // And meet the offspring
        for (cain <- offspringCh) {
          @{*cain | "info"}!(*stdout)
        }
      }
    }
  }
}
